plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name "Modmuss50 Repository"
        url 'https://maven.fabricmc.net/'
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = 'legacy-fabric'
        url = 'https://maven.legacyfabric.net/'
    }
}

minecraft {
    accessWidener = file("src/main/resources/optifabric.accesswidener")
    intermediaryUrl = {
        return "https://maven.legacyfabric.net/net/fabricmc/intermediary/" + it + "/intermediary-" + it + "-v2.jar"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
    include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
}

task unzip(type: Copy) {
    def zipFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    def outputDir = file("${buildDir}/unpacked/dist")

    if (outputDir.exists()) {
        outputDir.deleteDir()
    }

    from zipTree(zipFile)
    into outputDir
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = 8
    }
}

java {
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}